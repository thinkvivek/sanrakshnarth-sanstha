using System;
using System.Windows;
using System.Windows.Controls;
using System.Text.RegularExpressions;
using Microsoft.SqlServer.Management.SqlParser.Parser;
using System.Collections.Generic;
using System.Linq;

namespace SqlQueryFormatter
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void FormatButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string unformattedQuery = InputTextBox.Text;
                string formattedQuery = FormatSqlQuery(unformattedQuery);
                OutputTextBox.Text = formattedQuery;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error formatting query: {ex.Message}", "Formatting Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private string FormatSqlQuery(string unformattedQuery)
        {
            // Remove extra whitespaces
            string cleanedQuery = Regex.Replace(unformattedQuery, @"\s+", " ").Trim();

            // Define SQL keywords with proper casing
            string[] keywords = new string[]
            {
                "SELECT", "FROM", "WHERE", "AND", "OR", "JOIN", "LEFT", "RIGHT", "INNER", "OUTER",
                "GROUP BY", "ORDER BY", "HAVING", "UNION", "INSERT", "UPDATE", "DELETE", 
                "CREATE", "ALTER", "DROP", "TRUNCATE", "WITH", "AS", "ON", "IN"
            };

            // Replace keywords with properly cased versions
            foreach (string keyword in keywords)
            {
                cleanedQuery = Regex.Replace(
                    cleanedQuery, 
                    $@"\b{keyword}\b", 
                    keyword, 
                    RegexOptions.IgnoreCase
                );
            }

            // Add line breaks around major clauses
            keywords.ToList().ForEach(keyword => 
            {
                cleanedQuery = Regex.Replace(
                    cleanedQuery, 
                    $@"({keyword})", 
                    "\n$1", 
                    RegexOptions.IgnoreCase
                );
            });

            // Indent subqueries and nested conditions
            cleanedQuery = IndentQuery(cleanedQuery);

            return cleanedQuery.Trim();
        }

        private string IndentQuery(string query)
        {
            int indentLevel = 0;
            string[] lines = query.Split('\n');
            
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i].Trim();
                
                // Adjust indent for opening parentheses
                int openParens = line.Count(c => c == '(');
                int closeParens = line.Count(c => c == ')');
                
                if (line.Contains("("))
                    indentLevel++;
                
                lines[i] = new string(' ', indentLevel * 4) + line;
                
                if (line.Contains(")"))
                    indentLevel = Math.Max(0, indentLevel - 1);
            }
            
            return string.Join("\n", lines);
        }

        private void CopyButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrWhiteSpace(OutputTextBox.Text))
            {
                Clipboard.SetText(OutputTextBox.Text);
                MessageBox.Show("Formatted SQL copied to clipboard!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void ClearButton_Click(object sender, RoutedEventArgs e)
        {
            InputTextBox.Clear();
            OutputTextBox.Clear();
        }
    }

    public partial class MainWindow
    {
        private void InitializeComponent()
        {
            // Window properties
            Title = "SQL Query Formatter";
            Width = 800;
            Height = 600;

            // Main grid layout
            Grid mainGrid = new Grid
            {
                Margin = new Thickness(10)
            };
            mainGrid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });
            mainGrid.RowDefinitions.Add(new RowDefinition { Height = new GridLength(1, GridUnitType.Star) });
            mainGrid.RowDefinitions.Add(new RowDefinition { Height = GridLength.Auto });

            // Input TextBox
            InputTextBox = new TextBox
            {
                AcceptsReturn = true,
                TextWrapping = TextWrapping.Wrap,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                Margin = new Thickness(0, 0, 0, 10),
                PlaceholderText = "Paste your unformatted SQL query here..."
            };
            Grid.SetRow(InputTextBox, 0);
            mainGrid.Children.Add(InputTextBox);

            // Buttons
            StackPanel buttonPanel = new StackPanel
            {
                Orientation = Orientation.Horizontal,
                HorizontalAlignment = HorizontalAlignment.Center,
                Margin = new Thickness(0, 10, 0, 10)
            };

            Button formatButton = new Button
            {
                Content = "Format Query",
                Margin = new Thickness(0, 0, 10, 0),
                Padding = new Thickness(10, 5, 10, 5)
            };
            formatButton.Click += FormatButton_Click;
            buttonPanel.Children.Add(formatButton);

            Button copyButton = new Button
            {
                Content = "Copy Formatted",
                Margin = new Thickness(0, 0, 10, 0),
                Padding = new Thickness(10, 5, 10, 5)
            };
            copyButton.Click += CopyButton_Click;
            buttonPanel.Children.Add(copyButton);

            Button clearButton = new Button
            {
                Content = "Clear",
                Padding = new Thickness(10, 5, 10, 5)
            };
            clearButton.Click += ClearButton_Click;
            buttonPanel.Children.Add(clearButton);

            Grid.SetRow(buttonPanel, 1);
            mainGrid.Children.Add(buttonPanel);

            // Output TextBox
            OutputTextBox = new TextBox
            {
                AcceptsReturn = true,
                TextWrapping = TextWrapping.Wrap,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                IsReadOnly = true,
                PlaceholderText = "Formatted SQL query will appear here..."
            };
            Grid.SetRow(OutputTextBox, 2);
            mainGrid.Children.Add(OutputTextBox);

            Content = mainGrid;
        }
    }
}

// App.xaml
<Application x:Class="SqlQueryFormatter.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <Style x:Key="{x:Type TextBox}" TargetType="TextBox">
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Margin" Value="0,0,0,10"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="#CCCCCC"/>
        </Style>
        
        <Style x:Key="{x:Type Button}" TargetType="Button">
            <Setter Property="Background" Value="#4CAF50"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Margin" Value="5,0"/>
        </Style>
    </Application.Resources>
</Application>
