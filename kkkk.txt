<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Control-M Job Dependency Graph</title>
  <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
  <style>
    #network {
      width: 100%;
      height: 600px;
      border: 1px solid lightgray;
    }
    #details {
      width: 100%;
      height: 200px;
      overflow-y: auto;
      border: 1px solid lightgray;
      padding: 10px;
      font-family: Arial, sans-serif;
    }
    body {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
  </style>
</head>
<body>
  <div id="network"></div>
  <div id="details">Click a job to see details here...</div>

  <script>
    fetch('job_dependencies.json')
      .then(response => {
        if (!response.ok) {
          throw new Error(`Failed to fetch JSON: ${response.status} - ${response.statusText}`);
        }
        return response.text(); // Get raw text first to debug
      })
      .then(text => {
        console.log('Raw JSON text:', text); // Log raw content
        let data;
        try {
          data = JSON.parse(text);
        } catch (e) {
          throw new Error(`JSON Parse Error: ${e.message}`);
        }
        console.log('Parsed JSON:', data);

        if (!data.nodes || !Array.isArray(data.nodes) || data.nodes.length === 0) {
          throw new Error('No valid nodes found in JSON');
        }
        if (!data.edges || !Array.isArray(data.edges)) {
          throw new Error('No valid edges found in JSON');
        }

        const nodes = new vis.DataSet(data.nodes.map(node => ({
          id: node.id,
          label: node.JOBNAME || 'Unnamed',
          title: `Job: ${node.JOBNAME || 'N/A'}\nDesc: ${node.DESCRIPTION || 'N/A'}\nNode: ${node.NODEID || 'N/A'}`,
          fullDetails: node
        })));
        const edges = new vis.DataSet(data.edges);

        const container = document.getElementById('network');
        const graphData = { nodes: nodes, edges: edges };
        const options = {
          nodes: {
            shape: 'dot',
            size: 15,
            font: { size: 12 },
            borderWidth: 2
          },
          edges: {
            arrows: 'to',
            smooth: { type: 'curvedCW' }
          },
          layout: {
            hierarchical: {
              direction: 'UD',
              sortMethod: 'directed'
            }
          },
          physics: false,
          interaction: { hover: true, tooltipDelay: 200 }
        };

        const network = new vis.Network(container, graphData, options);
        console.log('Graph rendered successfully');
      })
      .catch(error => {
        console.error('Error:', error);
        document.getElementById('details').innerHTML = `Error: ${error.message}<br>Check console for details.`;
      });
  </script>
</body>
</html>
