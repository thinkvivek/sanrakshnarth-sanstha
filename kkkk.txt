import xml.etree.ElementTree as ET
import json

def parse_sub_elements(element):
    """
    Recursively parse an XML element and its sub-elements into a dictionary.
    Captures attributes, text content, and nested elements.
    """
    result = {}
    
    # Capture all attributes
    if element.attrib:
        result.update(element.attrib)
    
    # Capture text content if present
    if element.text and element.text.strip():
        result['text'] = element.text.strip()
    
    # Parse sub-elements
    children = {}
    for child in element:
        child_data = parse_sub_elements(child)
        if child.tag in children:
            # Handle multiple instances (e.g., multiple SHOUT or ON nodes)
            if not isinstance(children[child.tag], list):
                children[child.tag] = [children[child.tag]]
            children[child.tag].append(child_data)
        else:
            children[child.tag] = child_data
    
    if children:
        result.update(children)
    
    return result

def xml_to_json(xml_file):
    """
    Convert Control-M XML to JSON, extracting all JOB properties and specified sub-nodes.
    """
    tree = ET.parse(xml_file)
    root = tree.getroot()
    
    # Initialize result structure
    result = {
        "DEFTABLE": []
    }
    
    # Process each FOLDER under DEFTABLE
    for folder in root.findall('.//FOLDER'):
        folder_data = {
            "FOLDERNAME": folder.get('FOLDERNAME', 'Unnamed'),
            "JOBS": []
        }
        
        # Process each JOB under FOLDER
        for job in folder.findall('JOB'):
            job_data = parse_sub_elements(job)
            folder_data["JOBS"].append(job_data)
        
        result["DEFTABLE"].append(folder_data)
    
    return result

def main():
    xml_file = "control_m_jobs.xml"  # Replace with your XML file path
    output_json = "C:/kkk/job_dependencies.json"  # Output path in C:\kkk
    
    # Convert XML to JSON
    json_data = xml_to_json(xml_file)
    
    # Write to JSON file
    with open(output_json, 'w') as f:
        json.dump(json_data, f, indent=2)
    
    print(f"JSON file created at: {output_json}")
    print(f"Processed {sum(len(folder['JOBS']) for folder in json_data['DEFTABLE'])} jobs")

if __name__ == "__main__":
    main()
