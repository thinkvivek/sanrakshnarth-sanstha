import os
import csv
import xml.etree.ElementTree as ET
import re

# Path to your SSRS folder (Update this)
ssrs_folder = "path/to/your/SSRS/folder"
output_csv = "rdl_extracted_data.csv"

# SSRS XML Namespaces (2010 & 2016 schemas)
NAMESPACES = {
    'default': 'http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition',
    'data_source': 'http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition'
}

# Function to extract RDL details
def extract_rdl_info(rdl_file):
    try:
        with open(rdl_file, "r", encoding="utf-8") as file:
            xml_content = file.read()  # Read full XML as a string
        
        # Parse XML
        tree = ET.ElementTree(ET.fromstring(xml_content))
        root = tree.getroot()

        # Determine correct namespace
        ns = NAMESPACES['default']
        if root.tag.startswith('{http://schemas.microsoft.com/sqlserver/reporting/2016'):
            ns = NAMESPACES['data_source']

        report_data = []

        # Extract DataSets
        for dataset in root.findall(".//{"+ns+"}DataSet"):
            dataset_name = dataset.get("Name", "Unknown DataSet")

            # Extract Query inside DataSet
            query = dataset.find("{"+ns+"}Query")
            if query is not None:
                # Extract DataSource Name
                data_source_name = query.find("{"+ns+"}DataSourceName")
                data_source_name = data_source_name.text.strip() if data_source_name is not None else "Unknown DataSource"

                # Extract CommandType (StoredProcedure or Text)
                command_type = query.find("{"+ns+"}CommandType")
                command_type = command_type.text.strip() if command_type is not None else "Text"

                # Extract CommandText (Full SQL Query)
                command_text = query.find("{"+ns+"}CommandText")
                full_query = ""

                if command_text is not None:
                    # Extract full text content while preserving newlines
                    full_query = "".join(command_text.itertext()).strip()

                    # Decode XML-encoded characters
                    full_query = re.sub(r"&lt;", "<", full_query)
                    full_query = re.sub(r"&gt;", ">", full_query)
                    full_query = re.sub(r"&amp;", "&", full_query)

                report_data.append({
                    "RDL File": os.path.basename(rdl_file),
                    "DataSource Name": data_source_name,
                    "DataSet Name": dataset_name,
                    "CommandType": command_type,
                    "CommandText": full_query  # Preserve formatting
                })

        return report_data

    except Exception as e:
        print(f"Error processing {rdl_file}: {e}")
        return []

# Collect all RDL files and extract data
rdl_data = []
for root, dirs, files in os.walk(ssrs_folder):
    for file in files:
        if file.endswith(".rdl"):
            rdl_path = os.path.join(root, file)
            rdl_data.extend(extract_rdl_info(rdl_path))

# Write to Pipe-Delimited CSV file
with open(output_csv, mode="w", newline="", encoding="utf-8") as csvfile:
    fieldnames = ["RDL File", "DataSource Name", "DataSet Name", "CommandType", "CommandText"]
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter="|", quotechar='"', quoting=csv.QUOTE_ALL)

    writer.writeheader()
    writer.writerows(rdl_data)

print(f"Extraction completed. CSV file saved as {output_csv}")
