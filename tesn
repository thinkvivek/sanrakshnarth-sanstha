def split_file(input_file, output_folder, num_parts):
    """
    Split a large text file into smaller parts.

    :param input_file: Path to the large input file.
    :param output_folder: Path to the folder to save split files.
    :param num_parts: Number of files to split into.
    """
    # Count the total number of rows in the file
    with open(input_file, 'r') as file:
        total_lines = sum(1 for _ in file)

    lines_per_part = total_lines // num_parts
    remainder = total_lines % num_parts

    # Open the input file and split it into parts
    with open(input_file, 'r') as file:
        for i in range(num_parts):
            part_file_name = f"{output_folder}/part_{i + 1}.txt"
            with open(part_file_name, 'w') as part_file:
                # Add extra line to some parts to accommodate remainder
                lines_to_write = lines_per_part + (1 if i < remainder else 0)
                for _ in range(lines_to_write):
                    line = file.readline()
                    if not line:
                        break
                    part_file.write(line)

    print(f"File successfully split into {num_parts} parts in {output_folder}")


if __name__ == "__main__":
    input_file = "C:/Data/yourfile.txt"  # Path to the input file
    output_folder = "C:/Data/SplitFiles"  # Folder where parts will be saved
    num_parts = 10  # Number of files to split into

    # Create the output folder if it doesn't exist
    import os
    os.makedirs(output_folder, exist_ok=True)

    # Split the file
    split_file(input_file, output_folder, num_parts)




def check_and_print_lines(input_file, output_file, delimiter='|'):
    """
    Check a text file for unwanted carriage return characters, ensure line terminations,
    and print lines to a new file.
    
    :param input_file: Path to the input file.
    :param output_file: Path to save the output file with line checks.
    :param delimiter: Field delimiter (default is pipe `|`).
    """
    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
        line_num = 0
        for line in infile:
            line_num += 1

            # Print the line to the new output file (no modifications)
            outfile.write(line)
            
            # Check if there's a carriage return (\r) character
            if '\r' in line:
                print(f"Carriage return found at line {line_num}: {repr(line)}")

            # Check if the line ends with newline character
            if not line.endswith('\n'):
                print(f"Missing newline at the end of line {line_num}: {repr(line)}")

            # Optional: Checking if the row has inconsistent columns (based on expected count)
            columns = line.split(delimiter)
            expected_column_count = 5  # Update this number based on your file's expected column count
            if len(columns) != expected_column_count:
                print(f"Inconsistent number of columns at line {line_num}: {len(columns)} columns, expected {expected_column_count}.")

    print(f"Lines have been printed to {output_file}.")


if __name__ == "__main__":
    input_file = "C:/Data/yourfile.txt"  # Path to your input file
    output_file = "C:/Data/output_file.txt"  # Path to save the output file

    check_and_print_lines(input_file, output_file)

===============================================================

def check_and_print_lines(input_file, output_file, delimiter='|'):
    """
    Check a text file for unwanted carriage return characters, ensure line terminations,
    and print lines with issues to an output file.
    
    :param input_file: Path to the input file.
    :param output_file: Path to save the output file with lines having issues.
    :param delimiter: Field delimiter (default is pipe `|`).
    """
    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
        line_num = 0
        for line in infile:
            line_num += 1

            issues_found = False  # Flag to track if any issue is found in this line

            # Check if there is a carriage return (\r) character
            if '\r' in line:
                issues_found = True
                print(f"Carriage return found at line {line_num}: {repr(line)}")
            
            # Check if the line ends with a newline character
            if not line.endswith('\n'):
                issues_found = True
                print(f"Missing newline at the end of line {line_num}: {repr(line)}")
            
            # Optional: Checking if the row has inconsistent columns
            columns = line.split(delimiter)
            expected_column_count = 5  # Update this number based on your file's expected column count
            if len(columns) != expected_column_count:
                issues_found = True
                print(f"Inconsistent number of columns at line {line_num}: {len(columns)} columns, expected {expected_column_count}.")

            # If any issues were found, write the line to the output file
            if issues_found:
                outfile.write(line)

    print(f"Lines with issues have been printed to {output_file}.")


if __name__ == "__main__":
    input_file = "C:/Data/yourfile.txt"  # Path to your input file
    output_file = "C:/Data/output_file_with_issues.txt"  # Path to save output file with problematic lines

    check_and_print_lines(input_file, output_file)
