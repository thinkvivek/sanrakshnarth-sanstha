using System;
using System.Collections.Generic;
using System.Drawing;
using OfficeOpenXml;
using OfficeOpenXml.Style;

class Program
{
    static void Main()
    {
        // Load Excel files into ExcelPackage objects
        ExcelPackage excelPackage1 = new ExcelPackage(new System.IO.FileInfo("worksheet1.xlsx"));
        ExcelPackage excelPackage2 = new ExcelPackage(new System.IO.FileInfo("worksheet2.xlsx"));

        // Get worksheets from ExcelPackage objects
        ExcelWorksheet worksheet1 = excelPackage1.Workbook.Worksheets[0];
        ExcelWorksheet worksheet2 = excelPackage2.Workbook.Worksheets[0];

        // Create a new ExcelPackage for differences
        ExcelPackage differencesPackage = new ExcelPackage();
        ExcelWorksheet differencesWorksheet = differencesPackage.Workbook.Worksheets.Add("Differences");

        // Compare the two Excel sheets
        CompareExcelSheets(worksheet1, worksheet2, differencesWorksheet);

        // Save the differences Excel sheet
        differencesPackage.SaveAs(new System.IO.FileInfo("differences.xlsx"));

        Console.WriteLine("Differences saved successfully.");
    }

    static void CompareExcelSheets(ExcelWorksheet worksheet1, ExcelWorksheet worksheet2, ExcelWorksheet differencesWorksheet)
    {
        // Copy headers to differences worksheet
        for (int col = 1; col <= worksheet1.Dimension.End.Column; col++)
        {
            differencesWorksheet.Cells[1, col].Value = worksheet1.Cells[1, col].Value;
        }

        // Compare rows
        for (int row1Index = 2; row1Index <= worksheet1.Dimension.End.Row; row1Index++)
        {
            // Get the current row from worksheet1
            var row1 = worksheet1.Cells[row1Index, 1, row1Index, worksheet1.Dimension.End.Column];

            // Find the best match row in worksheet2
            int bestMatchRowIndex = FindBestMatchRowIndex(row1, worksheet2);

            // If a match is found, compare the rows
            if (bestMatchRowIndex != -1)
            {
                var row2 = worksheet2.Cells[bestMatchRowIndex, 1, bestMatchRowIndex, worksheet2.Dimension.End.Column];
                CompareAndHighlightRows(row1, row2, differencesWorksheet, row1Index);
            }
            else
            {
                // If no match is found, mark the entire row from worksheet1 as a difference
                HighlightRow(differencesWorksheet, row1Index, worksheet1.Dimension.End.Column, Color.Red);
            }
        }

        // Check for remaining rows in worksheet2 that were not matched
        for (int row2Index = 2; row2Index <= worksheet2.Dimension.End.Row; row2Index++)
        {
            var row2 = worksheet2.Cells[row2Index, 1, row2Index, worksheet2.Dimension.End.Column];
            HighlightRow(differencesWorksheet, row2Index + worksheet1.Dimension.End.Row, worksheet1.Dimension.End.Column, Color.Red);
        }
    }

    static int FindBestMatchRowIndex(ExcelRangeBase row, ExcelWorksheet worksheet)
    {
        int bestMatchRowIndex = -1;
        int maxMatchingColumns = 0;

        for (int rowIndex = 2; rowIndex <= worksheet.Dimension.End.Row; rowIndex++)
        {
            var currentRow = worksheet.Cells[rowIndex, 1, rowIndex, worksheet.Dimension.End.Column];
            int matchingColumns = CountMatchingColumns(row, currentRow);

            if (matchingColumns > maxMatchingColumns)
            {
                maxMatchingColumns = matchingColumns;
                bestMatchRowIndex = rowIndex;
            }
        }

        return bestMatchRowIndex;
    }

    static int CountMatchingColumns(ExcelRangeBase row1, ExcelRangeBase row2)
    {
        int matchingColumns = 0;

        for (int col = 1; col <= row1.End.Column; col++)
        {
            if (row1[1, col].Value.Equals(row2[1, col].Value))
            {
                matchingColumns++;
            }
        }

        return matchingColumns;
    }

    static void CompareAndHighlightRows(ExcelRangeBase row1, ExcelRangeBase row2, ExcelWorksheet differencesWorksheet, int rowIndex)
    {
        for (int col = 1; col <= row1.End.Column; col++)
        {
            if (!row1[1, col].Value.Equals(row2[1, col].Value))
            {
                HighlightCell(differencesWorksheet, rowIndex, col, Color.Red);
            }
        }
    }

    static void HighlightRow(ExcelWorksheet worksheet, int rowIndex, int numColumns, Color color)
    {
        for (int col = 1; col <= numColumns; col++)
        {
            HighlightCell(worksheet, rowIndex, col, color);
        }
    }

    static void HighlightCell(ExcelWorksheet worksheet, int rowIndex, int colIndex, Color color)
    {
        worksheet.Cells[rowIndex, colIndex].Style.Fill.PatternType = ExcelFillStyle.Solid;
        worksheet.Cells[rowIndex, colIndex].Style.Fill.BackgroundColor.SetColor(color);
    }
}
